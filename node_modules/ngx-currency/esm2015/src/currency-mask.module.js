import * as ɵngcc0 from '@angular/core';
var NgxCurrencyModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CurrencyMaskDirective } from "./currency-mask.directive";
import { CURRENCY_MASK_CONFIG } from "./currency-mask.config";
let NgxCurrencyModule = NgxCurrencyModule_1 = class NgxCurrencyModule {
    static forRoot(config) {
        return {
            ngModule: NgxCurrencyModule_1,
            providers: [{
                    provide: CURRENCY_MASK_CONFIG,
                    useValue: config,
                }]
        };
    }
};
NgxCurrencyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCurrencyModule });
NgxCurrencyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); }, imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCurrencyModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [CurrencyMaskDirective],
                exports: [CurrencyMaskDirective]
            }]
    }], null, null); })();
export { NgxCurrencyModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY3VycmVuY3kvc3JjL2N1cnJlbmN5LW1hc2subW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE9BQU8sRUFBc0IsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFDLG9CQUFvQixFQUFxQixNQUFNLHdCQUF3QixDQUFDO0FBT2hGLElBQWEsaUJBQWlCLHlCQUE5QixNQUFhLGlCQUFpQjtJQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQTBCO1FBQ3ZDLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFFBQVEsRUFBRSxNQUFNO2lCQUNqQixDQUFDO1NBQ0gsQ0FBQTtJQUNILENBQUM7Q0FDRjs7RUFBQSxDQVZZLGlCQUFpQixrREFMN0IsUUFBUSxDQUFDLFVBQ1IsT0FBTyxFQUFFLENBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBRSxVQUN0QyxZQUFZLEVBQUUsQ0FBRSxxQkFBcUIsQ0FBRSxVQUN2QztJQUFPLEVBQUUsQ0FBRSxxQkFBcUIsQ0FBRSxNQUNuQyxDQUFDLElBQ1csaUJBQWlCLENBVTdCOzs7Ozs7OzswQkFDRDtTQVhhLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0Zvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0N1cnJlbmN5TWFza0RpcmVjdGl2ZX0gZnJvbSBcIi4vY3VycmVuY3ktbWFzay5kaXJlY3RpdmVcIjtcbmltcG9ydCB7Q1VSUkVOQ1lfTUFTS19DT05GSUcsIEN1cnJlbmN5TWFza0NvbmZpZ30gZnJvbSBcIi4vY3VycmVuY3ktbWFzay5jb25maWdcIjtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogWyBDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogWyBDdXJyZW5jeU1hc2tEaXJlY3RpdmUgXSxcbiAgZXhwb3J0czogWyBDdXJyZW5jeU1hc2tEaXJlY3RpdmUgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hDdXJyZW5jeU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogQ3VycmVuY3lNYXNrQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hDdXJyZW5jeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgcHJvdmlkZTogQ1VSUkVOQ1lfTUFTS19DT05GSUcsXG4gICAgICAgIHVzZVZhbHVlOiBjb25maWcsXG4gICAgICB9XVxuICAgIH1cbiAgfVxufVxuIl19