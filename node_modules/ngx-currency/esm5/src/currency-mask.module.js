import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CurrencyMaskDirective } from "./currency-mask.directive";
import { CURRENCY_MASK_CONFIG } from "./currency-mask.config";
import * as ɵngcc0 from '@angular/core';
var NgxCurrencyModule = /** @class */ (function () {
    function NgxCurrencyModule() {
    }
    NgxCurrencyModule_1 = NgxCurrencyModule;
    NgxCurrencyModule.forRoot = function (config) {
        return {
            ngModule: NgxCurrencyModule_1,
            providers: [{
                    provide: CURRENCY_MASK_CONFIG,
                    useValue: config,
                }]
        };
    };
    var NgxCurrencyModule_1;
NgxCurrencyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCurrencyModule });
NgxCurrencyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); }, imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCurrencyModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [CurrencyMaskDirective],
                exports: [CurrencyMaskDirective]
            }]
    }], function () { return []; }, null); })();
    return NgxCurrencyModule;
}());
export { NgxCurrencyModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtY3VycmVuY3kvc3JjL2N1cnJlbmN5LW1hc2subW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxvQkFBb0IsRUFBcUIsTUFBTSx3QkFBd0IsQ0FBQzs7QUFPaEY7SUFBQTtJQVVBLENBQUM7MEJBVlksaUJBQWlCO0lBQ3JCLHlCQUFPLEdBQWQsVUFBZSxNQUEwQjtRQUN2QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLG1CQUFpQjtZQUMzQixTQUFTLEVBQUUsQ0FBQztvQkFDVixPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixRQUFRLEVBQUUsTUFBTTtpQkFDakIsQ0FBQztTQUNILENBQUE7SUFDSCxDQUFDOzRCQUV3QjtJQVhkLGlCQUFpQixzREFMN0I7SUFBUSxDQUFDLGNBQ1IsT0FBTyxFQUFFLENBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBRSxjQUN0QyxZQUFZLEVBQUUsQ0FBRSxxQkFBcUIsQ0FBRSxjQUN2QyxPQUFPLEVBQUUsQ0FBRSxxQkFBcUIsQ0FBRSxVQUNuQyxDQUFDLFFBQ1c7R0FBaUIsQ0FVN0I7Ozs7Ozs7O2dEQUNEO0lBREEsd0JBQUM7Q0FBQSxBQVZELElBVUM7U0FWWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtDdXJyZW5jeU1hc2tEaXJlY3RpdmV9IGZyb20gXCIuL2N1cnJlbmN5LW1hc2suZGlyZWN0aXZlXCI7XG5pbXBvcnQge0NVUlJFTkNZX01BU0tfQ09ORklHLCBDdXJyZW5jeU1hc2tDb25maWd9IGZyb20gXCIuL2N1cnJlbmN5LW1hc2suY29uZmlnXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFsgQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZSBdLFxuICBkZWNsYXJhdGlvbnM6IFsgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIF0sXG4gIGV4cG9ydHM6IFsgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4Q3VycmVuY3lNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IEN1cnJlbmN5TWFza0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4Q3VycmVuY3lNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IENVUlJFTkNZX01BU0tfQ09ORklHLFxuICAgICAgICB1c2VWYWx1ZTogY29uZmlnLFxuICAgICAgfV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==