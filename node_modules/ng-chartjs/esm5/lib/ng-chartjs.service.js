import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as Chart from 'chart.js';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "./plugins-config";
import * as ɵngcc0 from '@angular/core';
var NgChartjsService = /** @class */ (function () {
    function NgChartjsService(storeService, pluginConfig) {
        this.storeService = storeService;
        this.pluginConfig = pluginConfig;
        var plugins = pluginConfig.plugins;
        if (plugins.length !== 0 || plugins) {
            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i]) {
                    Chart.plugins.register(plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    NgChartjsService.prototype.getChart = function (id) {
        return this.storeService.getChart(id);
    };
    NgChartjsService.ctorParameters = function () { return [
        { type: StoreService },
        { type: PluginConfig }
    ]; };
    NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
    NgChartjsService = __decorate([ __metadata("design:paramtypes", [StoreService,
            PluginConfig])
    ], NgChartjsService);
NgChartjsService.ɵfac = function NgChartjsService_Factory(t) { return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(StoreService), ɵngcc0.ɵɵinject(PluginConfig)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: StoreService }, { type: PluginConfig }]; }, null); })();
    return NgChartjsService;
}());
export { NgChartjsService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovbmctY2hhcnRqcy9saWIvbmctY2hhcnRqcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxLQUFLLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBSy9DO0lBRUksMEJBQ1UsWUFBMEIsRUFDMUIsWUFBMEI7UUFEMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDbEMsSUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRTtZQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BDO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFDRCwyQkFBMkI7SUFDM0IsbUNBQVEsR0FBUixVQUFTLEVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkFkdUIsWUFBWTtnQkFDWixZQUFZOzs7SUFKM0IsZ0JBQWdCLGVBRWxCLFNBTFYsVUFBVSxDQUFDLGNBQ1YsVUFBVSxFQUFFLDlDQUVOLGtDQUdvQixZQUFZO0lBTHBCLFVBQ25CLENBQUMsSEFLMEIsWUFBWTtPQUozQixnQkFBZ0IsQ0FrQjVCOzs7Ozs7OzhGQUNEOzJCQTNCQTtDQTBCQyxBQWxCRCxJQWtCQztTQWxCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBDaGFydCBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuL3BsdWdpbnMtY29uZmlnJztcbmltcG9ydCB7IFN0b3JlU2VydmljZSB9IGZyb20gJy4vc3RvcmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHN0b3JlU2VydmljZTogU3RvcmVTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSBwbHVnaW5Db25maWc6IFBsdWdpbkNvbmZpZykge1xuICAgICAgY29uc3QgcGx1Z2lucyA9IHBsdWdpbkNvbmZpZy5wbHVnaW5zO1xuICAgICAgaWYgKHBsdWdpbnMubGVuZ3RoICE9PSAwIHx8IHBsdWdpbnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBsdWdpbnNbaV0pIHtcbiAgICAgICAgICAgIENoYXJ0LnBsdWdpbnMucmVnaXN0ZXIocGx1Z2luc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGdldCBjaGFydCBpbnN0YW5jZSBieSBpZFxuICAgIGdldENoYXJ0KGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTZXJ2aWNlLmdldENoYXJ0KGlkKTtcbiAgICB9XG59XG4iXX0=