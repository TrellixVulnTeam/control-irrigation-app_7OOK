import { OnDestroy, OnInit, OnChanges, EventEmitter, ElementRef, SimpleChanges } from '@angular/core';
import * as Chart from 'chart.js';
import { StoreService } from './store.service';
import { NgChartjsService } from './ng-chartjs.service';
import { Colors } from './colors';
import * as ɵngcc0 from '@angular/core';
export declare type Labels = Array<string | string[] | number | number[] | Date | Date[] | any | any[]>;
export declare type Orientation = 'oldest' | 'latest';
export interface NgChartjsEvent {
    event: MouseEvent;
    active: Array<{}>;
}
export declare class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {
    private ngChartjsService;
    private storeService;
    data: number[] | any[];
    datasets: Chart.ChartDataSets[];
    labels: Labels;
    options: Chart.ChartOptions;
    inlinePlugins: any[];
    chartType: Chart.ChartType;
    colors: Colors[];
    legend: boolean;
    adding: {
        labels: Labels[];
        data: any[][];
    };
    removing: {
        orientation: Orientation;
    };
    resetOption: Chart.ChartType;
    chartClick: EventEmitter<NgChartjsEvent>;
    chartHover: EventEmitter<NgChartjsEvent>;
    private ctx;
    private chart_;
    private initFlag;
    private hasChanges;
    private element;
    constructor(element: ElementRef, ngChartjsService: NgChartjsService, storeService: StoreService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    get chart(): Chart;
    update(): void;
    addData(labels: Labels[], data: any[][]): void;
    removeData(orientation: Orientation): void;
    private refresh;
    private updateChartData;
    private getChartBuilder;
    private getDatasets;
    private addData_;
    private removeData_;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgChartjsDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgChartjsDirective, "canvas[ngChartjs]", ["ngChartjs"], {
    "labels": "labels";
    "options": "options";
    "data": "data";
    "datasets": "datasets";
    "inlinePlugins": "inlinePlugins";
    "chartType": "chartType";
    "colors": "colors";
    "legend": "legend";
    "adding": "adding";
    "removing": "removing";
    "resetOption": "resetOption";
}, {
    "chartClick": "chartClick";
    "chartHover": "chartHover";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibmctY2hhcnRqcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ2hhcnQgZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5nQ2hhcnRqc1NlcnZpY2UgfSBmcm9tICcuL25nLWNoYXJ0anMuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tICcuL2NvbG9ycyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIExhYmVscyA9IEFycmF5PHN0cmluZyB8IHN0cmluZ1tdIHwgbnVtYmVyIHwgbnVtYmVyW10gfCBEYXRlIHwgRGF0ZVtdIHwgYW55IHwgYW55W10+O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBPcmllbnRhdGlvbiA9ICdvbGRlc3QnIHwgJ2xhdGVzdCc7XG5leHBvcnQgaW50ZXJmYWNlIE5nQ2hhcnRqc0V2ZW50IHtcbiAgICBldmVudDogTW91c2VFdmVudDtcbiAgICBhY3RpdmU6IEFycmF5PHt9Pjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nQ2hhcnRqc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByaXZhdGUgbmdDaGFydGpzU2VydmljZTtcbiAgICBwcml2YXRlIHN0b3JlU2VydmljZTtcbiAgICBkYXRhOiBudW1iZXJbXSB8IGFueVtdO1xuICAgIGRhdGFzZXRzOiBDaGFydC5DaGFydERhdGFTZXRzW107XG4gICAgbGFiZWxzOiBMYWJlbHM7XG4gICAgb3B0aW9uczogQ2hhcnQuQ2hhcnRPcHRpb25zO1xuICAgIGlubGluZVBsdWdpbnM6IGFueVtdO1xuICAgIGNoYXJ0VHlwZTogQ2hhcnQuQ2hhcnRUeXBlO1xuICAgIGNvbG9yczogQ29sb3JzW107XG4gICAgbGVnZW5kOiBib29sZWFuO1xuICAgIGFkZGluZzoge1xuICAgICAgICBsYWJlbHM6IExhYmVsc1tdO1xuICAgICAgICBkYXRhOiBhbnlbXVtdO1xuICAgIH07XG4gICAgcmVtb3Zpbmc6IHtcbiAgICAgICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uO1xuICAgIH07XG4gICAgcmVzZXRPcHRpb246IENoYXJ0LkNoYXJ0VHlwZTtcbiAgICBjaGFydENsaWNrOiBFdmVudEVtaXR0ZXI8TmdDaGFydGpzRXZlbnQ+O1xuICAgIGNoYXJ0SG92ZXI6IEV2ZW50RW1pdHRlcjxOZ0NoYXJ0anNFdmVudD47XG4gICAgcHJpdmF0ZSBjdHg7XG4gICAgcHJpdmF0ZSBjaGFydF87XG4gICAgcHJpdmF0ZSBpbml0RmxhZztcbiAgICBwcml2YXRlIGhhc0NoYW5nZXM7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIG5nQ2hhcnRqc1NlcnZpY2U6IE5nQ2hhcnRqc1NlcnZpY2UsIHN0b3JlU2VydmljZTogU3RvcmVTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZ2V0IGNoYXJ0KCk6IENoYXJ0O1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xuICAgIGFkZERhdGEobGFiZWxzOiBMYWJlbHNbXSwgZGF0YTogYW55W11bXSk6IHZvaWQ7XG4gICAgcmVtb3ZlRGF0YShvcmllbnRhdGlvbjogT3JpZW50YXRpb24pOiB2b2lkO1xuICAgIHByaXZhdGUgcmVmcmVzaDtcbiAgICBwcml2YXRlIHVwZGF0ZUNoYXJ0RGF0YTtcbiAgICBwcml2YXRlIGdldENoYXJ0QnVpbGRlcjtcbiAgICBwcml2YXRlIGdldERhdGFzZXRzO1xuICAgIHByaXZhdGUgYWRkRGF0YV87XG4gICAgcHJpdmF0ZSByZW1vdmVEYXRhXztcbn1cbiJdfQ==