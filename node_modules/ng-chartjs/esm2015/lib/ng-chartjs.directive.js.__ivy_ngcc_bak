import { __decorate, __metadata } from "tslib";
import { OnDestroy, OnInit, OnChanges, EventEmitter, ElementRef, Input, Output, SimpleChanges, Directive } from '@angular/core';
import * as Chart from 'chart.js';
import { StoreService } from './store.service';
import { NgChartjsService } from './ng-chartjs.service';
import { getColors } from './colors';
/* tslint:disable-next-line */
let NgChartjsDirective = class NgChartjsDirective {
    constructor(element, ngChartjsService, storeService) {
        this.ngChartjsService = ngChartjsService;
        this.storeService = storeService;
        // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
        this.labels = [];
        // 相当于chart.js的option
        this.options = {};
        // 鼠标点击图表所有的区域
        this.chartClick = new EventEmitter();
        // 鼠标悬浮在标签或者活跃的点上面时
        this.chartHover = new EventEmitter();
        this.initFlag = false;
        this.hasChanges = false;
        this.element = element; // 获取指令所在canvas元素
    }
    ngOnInit() {
        this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
        this.initFlag = true; // 是否初始化了的标志
        if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新
            this.refresh();
        }
    }
    ngOnChanges(changes) {
        // TODO: 插件变化刷新，开放刷新按钮
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes.data) {
                    this.updateChartData(changes.data.currentValue);
                }
                else {
                    this.updateChartData(changes.datasets.currentValue);
                }
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('labels')) {
                this.chart_.data.labels = changes.labels.currentValue;
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('legend')) {
                if (changes.legend.currentValue !== changes.legend.previousValue) {
                    this.chart_.options.legend.display = changes.legend.currentValue;
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('adding')) {
                this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('removing')) {
                if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {
                    this.removeData_(changes.removing.currentValue.orientation);
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('chartType')) {
                this.refresh();
            }
            if (changes.hasOwnProperty('resetOption')) {
                Object.assign(this.chart_.options, changes.resetOption.currentValue);
                this.hasChanges = true;
            }
            if (this.hasChanges) {
                this.chart_.update();
                this.hasChanges = false;
            }
        }
    }
    ngOnDestroy() {
        if (this.chart_) {
            this.chart_.destroy();
            this.chart_ = void 0;
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id); // delete chart instance.
            }
        }
    }
    // get Chartjs object
    get chart() { return this.chart_; }
    // update chartjs
    update() {
        this.chart_.update();
    }
    // Dynamic add data
    addData(labels, data) {
        this.addData_(labels, data);
        this.update();
    }
    // Dynamic remove data, orientation is 'ildest' or 'latest'
    removeData(orientation) {
        this.removeData_(orientation);
        this.update();
    }
    refresh() {
        this.ngOnDestroy();
        this.chart_ = this.getChartBuilder(this.ctx /*, data, this.options*/);
        if (this.element.nativeElement.hasAttribute('id')) {
            this.storeService.addChart(this.element.nativeElement.id, this.chart_);
        }
    }
    updateChartData(newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            this.chart_.data.datasets.forEach((dataset, i) => {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            });
        }
        else {
            this.chart_.data.datasets[0].data = newDataValues;
        }
    }
    getChartBuilder(ctx /*, data:Array<any>, options:any*/) {
        const datasets = this.getDatasets();
        const options = Object.assign({}, this.options); // 深复制options
        if (this.legend === false) { // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
            options.legend = { display: false };
        }
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = (event, active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ event, active });
            };
        }
        if (!options.onClick) {
            options.onClick = (event, active) => {
                this.chartClick.emit({ event, active });
            };
        }
        const opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets // TODO: 后续更改这个属性名字，否则警告
            },
            options: options,
            plugins: this.inlinePlugins
        };
        return new Chart(ctx, opts);
    }
    // 获取 chart.js的datasets数据
    getDatasets() {
        let datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = this.data.map((data, index) => {
                    return { data, label: this.labels[index] || `Label ${index}` };
                });
            }
            else {
                datasets = [{ data: this.data, label: `Label 0` }];
            }
        }
        if (this.datasets && this.datasets.length || (datasets && datasets.length)) {
            // fix elm type, pre type is number
            datasets = (this.datasets || datasets).map((elm, index) => {
                const newElm = Object.assign({}, elm);
                if (this.colors && this.colors.length) {
                    Object.assign(newElm, this.colors[index]);
                }
                else {
                    Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));
                }
                return newElm;
            });
        }
        if (!datasets) {
            throw new Error(`ng-chartjs configuration error,
      data or datasets field are required to render char ${this.chartType}`);
        }
        return datasets;
    }
    addData_(labels, data) {
        if (labels.length === 0 || data.length === 0) {
            return;
        }
        // update labels
        labels.forEach((label) => { this.chart_.data.labels.push(label); });
        this.chart_.data.datasets.forEach((dataset, index) => {
            if (data[index]) {
                for (let i = 0; i < data[index].length; i++) {
                    dataset.data.push(data[index][i]);
                }
            }
            else {
                console.log('The added data does not match the original data');
                return;
            }
        });
    }
    removeData_(orientation) {
        // fix: support to oldest feature
        if (orientation === 'latest') {
            this.chart_.data.labels.pop();
            this.chart_.data.datasets.forEach((dataset) => {
                dataset.data.pop();
            });
        }
        else if (orientation === 'oldest') {
            this.chart_.data.labels.shift();
            this.chart_.data.datasets.forEach((dataset) => {
                dataset.data.shift();
            });
        }
    }
};
NgChartjsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgChartjsService },
    { type: StoreService }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgChartjsDirective.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgChartjsDirective.prototype, "datasets", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgChartjsDirective.prototype, "labels", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgChartjsDirective.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgChartjsDirective.prototype, "inlinePlugins", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgChartjsDirective.prototype, "chartType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NgChartjsDirective.prototype, "colors", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgChartjsDirective.prototype, "legend", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgChartjsDirective.prototype, "adding", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgChartjsDirective.prototype, "removing", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NgChartjsDirective.prototype, "resetOption", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgChartjsDirective.prototype, "chartClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NgChartjsDirective.prototype, "chartHover", void 0);
NgChartjsDirective = __decorate([
    Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' }),
    __metadata("design:paramtypes", [ElementRef,
        NgChartjsService,
        StoreService])
], NgChartjsDirective);
export { NgChartjsDirective };
//# sourceMappingURL=data:application/json;base64,