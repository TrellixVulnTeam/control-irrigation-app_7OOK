{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let HeaderInterceptorService = /*#__PURE__*/(() => {\n  class HeaderInterceptorService {\n    constructor() {}\n\n    intercept(req, next) {\n      if (localStorage.getItem('token') !== null) {\n        const token = 'Bearer ' + localStorage.getItem('token');\n        const tokenRequest = req.clone({\n          headers: req.headers.set('Authorization', token)\n        });\n        return next.handle(tokenRequest).pipe(tap(event => {\n          if (event instanceof HttpResponse && (event.status === 200 || event.status === 201)) {\n            console.info('Sucesso na operação');\n          }\n        }), catchError(this.processaError));\n      } else {\n        return next.handle(req).pipe(catchError(this.processaError));\n      }\n    }\n\n    processaError(error) {\n      let errorMessage = 'Erro desconhecido';\n\n      if (error.error instanceof ErrorEvent) {\n        console.error(error.error);\n        errorMessage = 'Error: ' + error.error.error;\n      } else {\n        errorMessage = 'Código: ' + error.error.code + '\\nMensagem: ' + error.error.error;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  HeaderInterceptorService.ɵfac = function HeaderInterceptorService_Factory(t) {\n    return new (t || HeaderInterceptorService)();\n  };\n\n  HeaderInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeaderInterceptorService,\n    factory: HeaderInterceptorService.ɵfac\n  });\n  return HeaderInterceptorService;\n})();\nexport let HttpInterceptorModule = /*#__PURE__*/(() => {\n  class HttpInterceptorModule {}\n\n  HttpInterceptorModule.ɵfac = function HttpInterceptorModule_Factory(t) {\n    return new (t || HttpInterceptorModule)();\n  };\n\n  HttpInterceptorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: HttpInterceptorModule\n  });\n  HttpInterceptorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: HeaderInterceptorService,\n      multi: true\n    }]\n  });\n  return HttpInterceptorModule;\n})();","map":null,"metadata":{},"sourceType":"module"}